import 'package:equatable/equatable.dart';

/// Enum for achievement types
enum AchievementType {
  maintenanceAchievement('maintenance_achievement', 'مشهد صيانة'),
  acAchievement('ac_achievement', 'مشهد تكييف'),
  checklist('checklist', 'تشيك ليست');

  const AchievementType(this.value, this.arabicName);
  final String value;
  final String arabicName;

  static AchievementType fromString(String value) {
    return AchievementType.values.firstWhere(
      (type) => type.value == value,
      orElse: () => AchievementType.checklist,
    );
  }
}

/// Enum for achievement status
enum AchievementStatus {
  draft('draft', 'مسودة'),
  submitted('submitted', 'مرسل');

  const AchievementStatus(this.value, this.arabicName);
  final String value;
  final String arabicName;

  static AchievementStatus fromString(String value) {
    return AchievementStatus.values.firstWhere(
      (status) => status.value == value,
      orElse: () => AchievementStatus.draft,
    );
  }
}

/// Model representing a school achievement submission
class SchoolAchievementModel extends Equatable {
  final String id;
  final String schoolId;
  final String schoolName;
  final String supervisorId;
  final AchievementType achievementType;
  final AchievementStatus status;
  final List<String> photos;
  final String? notes;
  final DateTime createdAt;
  final DateTime? updatedAt;
  final DateTime? submittedAt;

  const SchoolAchievementModel({
    required this.id,
    required this.schoolId,
    required this.schoolName,
    required this.supervisorId,
    required this.achievementType,
    required this.status,
    required this.photos,
    this.notes,
    required this.createdAt,
    this.updatedAt,
    this.submittedAt,
  });

  /// Creates a new achievement instance
  factory SchoolAchievementModel.create({
    required String schoolId,
    required String schoolName,
    required String supervisorId,
    required AchievementType achievementType,
    List<String>? photos,
    String? notes,
  }) {
    return SchoolAchievementModel(
      id: '', // Will be generated by database
      schoolId: schoolId,
      schoolName: schoolName,
      supervisorId: supervisorId,
      achievementType: achievementType,
      status: AchievementStatus.draft,
      photos: photos ?? [],
      notes: notes,
      createdAt: DateTime.now(),
    );
  }

  /// Creates a SchoolAchievementModel from a database map
  factory SchoolAchievementModel.fromMap(Map<String, dynamic> map) {
    return SchoolAchievementModel(
      id: map['id'] as String,
      schoolId: map['school_id'] as String,
      schoolName: map['school_name'] as String,
      supervisorId: map['supervisor_id'] as String,
      achievementType:
          AchievementType.fromString(map['achievement_type'] as String),
      status: AchievementStatus.fromString(map['status'] as String),
      photos: List<String>.from(map['photos'] ?? []),
      notes: map['notes'] as String?,
      createdAt: DateTime.parse(map['created_at'] as String),
      updatedAt: map['updated_at'] != null
          ? DateTime.parse(map['updated_at'] as String)
          : null,
      submittedAt: map['submitted_at'] != null
          ? DateTime.parse(map['submitted_at'] as String)
          : null,
    );
  }

  /// Converts the SchoolAchievementModel to a database map
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'school_id': schoolId,
      'school_name': schoolName,
      'supervisor_id': supervisorId,
      'achievement_type': achievementType.value,
      'status': status.value,
      'photos': photos,
      'notes': notes,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt?.toIso8601String(),
      'submitted_at': submittedAt?.toIso8601String(),
    };
  }

  /// Creates a copy with updated fields
  SchoolAchievementModel copyWith({
    String? id,
    String? schoolId,
    String? schoolName,
    String? supervisorId,
    AchievementType? achievementType,
    AchievementStatus? status,
    List<String>? photos,
    String? notes,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? submittedAt,
  }) {
    return SchoolAchievementModel(
      id: id ?? this.id,
      schoolId: schoolId ?? this.schoolId,
      schoolName: schoolName ?? this.schoolName,
      supervisorId: supervisorId ?? this.supervisorId,
      achievementType: achievementType ?? this.achievementType,
      status: status ?? this.status,
      photos: photos ?? this.photos,
      notes: notes ?? this.notes,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      submittedAt: submittedAt ?? this.submittedAt,
    );
  }

  /// Returns true if the achievement has photos
  bool get hasPhotos => photos.isNotEmpty;

  /// Returns the number of photos
  int get photoCount => photos.length;

  /// Returns true if the achievement is submitted
  bool get isSubmitted => status == AchievementStatus.submitted;

  /// Returns true if the achievement is a draft
  bool get isDraft => status == AchievementStatus.draft;

  /// Returns the Arabic name for the achievement type
  String get typeArabicName => achievementType.arabicName;

  /// Returns the Arabic name for the status
  String get statusArabicName => status.arabicName;

  /// Returns a formatted submission date string
  String get formattedSubmissionDate {
    if (submittedAt == null) return 'لم يتم الإرسال';
    return '${submittedAt!.day}/${submittedAt!.month}/${submittedAt!.year}';
  }

  /// Returns a formatted creation date string
  String get formattedCreationDate {
    return '${createdAt.day}/${createdAt.month}/${createdAt.year}';
  }

  @override
  List<Object?> get props => [
        id,
        schoolId,
        schoolName,
        supervisorId,
        achievementType,
        status,
        photos,
        notes,
        createdAt,
        updatedAt,
        submittedAt,
      ];
}

/// Model for achievement photo metadata
class AchievementPhotoModel extends Equatable {
  final String id;
  final String achievementId;
  final String photoUrl;
  final String? photoDescription;
  final int? fileSize;
  final String? mimeType;
  final DateTime uploadTimestamp;

  const AchievementPhotoModel({
    required this.id,
    required this.achievementId,
    required this.photoUrl,
    this.photoDescription,
    this.fileSize,
    this.mimeType,
    required this.uploadTimestamp,
  });

  /// Creates an AchievementPhotoModel from a database map
  factory AchievementPhotoModel.fromMap(Map<String, dynamic> map) {
    return AchievementPhotoModel(
      id: map['id'] as String,
      achievementId: map['achievement_id'] as String,
      photoUrl: map['photo_url'] as String,
      photoDescription: map['photo_description'] as String?,
      fileSize: map['file_size'] as int?,
      mimeType: map['mime_type'] as String?,
      uploadTimestamp: DateTime.parse(map['upload_timestamp'] as String),
    );
  }

  /// Converts the AchievementPhotoModel to a database map
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'achievement_id': achievementId,
      'photo_url': photoUrl,
      'photo_description': photoDescription,
      'file_size': fileSize,
      'mime_type': mimeType,
      'upload_timestamp': uploadTimestamp.toIso8601String(),
    };
  }

  /// Returns a formatted file size string
  String get formattedFileSize {
    if (fileSize == null) return 'غير محدد';
    if (fileSize! < 1024) return '${fileSize!} B';
    if (fileSize! < 1024 * 1024) {
      return '${(fileSize! / 1024).toStringAsFixed(1)} KB';
    }
    return '${(fileSize! / (1024 * 1024)).toStringAsFixed(1)} MB';
  }

  @override
  List<Object?> get props => [
        id,
        achievementId,
        photoUrl,
        photoDescription,
        fileSize,
        mimeType,
        uploadTimestamp,
      ];
}
